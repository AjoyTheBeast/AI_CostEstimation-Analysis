using ACE_App.Models;
using ACE_App.Services;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Aspose.Pdf;
using Aspose.Pdf.Text;
using PdfSharpCore.Pdf.Content.Objects;

namespace ACE_App.Controllers
{
    public class ACEController : Controller
    {
        private readonly IACEService _ace;

        public ACEController(IACEService ace)
        {
            _ace = ace;
        }

        public IActionResult Index()
        {
            return View(new ACEModel());
        }

        [HttpPost]
        public async Task<IActionResult> Create([FromBody] ACEModel item, bool generatePdf = false)
        {
            try
            {
                // Call the FastAPI service to get estimation results
                var result = await _ace.GetEstimation(item.UserInput);

                

                // Update the model properties based on API response
                item.UserInput = "";  // Clear user input
                

                // Handle error messages
                ViewBag.DisplayErrorMessage = !string.IsNullOrEmpty(result.ErrorMessage);

                // Check for PDF generation
                if (generatePdf)
                {
                    TempData["ACEModel"] = item;
                    return RedirectToAction("GeneratePdf");
                }

                // Return updated model to the view
                return Json(result);
            }
            catch
            {
                ViewBag.Error = "An error occurred while processing your request.";
                return View("Error");
            }
        }

        [HttpGet]
        public IActionResult GeneratePdf()
        {
            var model = TempData["ACEModel"] as ACEModel;
            if (model == null)
            {
                return RedirectToAction("Index");
            }

            var pdfBytes = GeneratePdfDocument(model);
            return File(pdfBytes, "application/pdf", "ACE_Model_Output.pdf");
        }

        private byte[] GeneratePdfDocument(ACEModel model)
        {
            Document pdfDocument = new Document();
            Page page = pdfDocument.Pages.Add();

            float leftMargin = 10, topMargin = 10, rightMargin = 10, bottomMargin = 10;
            float spacing = 5;

            // Add title fragment
            TextFragment titleFragment = new TextFragment("This is Autogenerated Report for ACE Output")
            {
                Margin = new MarginInfo { Top = topMargin, Left = leftMargin, Right = rightMargin }
            };
            titleFragment.TextState.FontSize = 18;
            titleFragment.TextState.FontStyle = FontStyles.Bold;
            titleFragment.TextState.ForegroundColor = Aspose.Pdf.Color.DarkBlue;
            page.Paragraphs.Add(titleFragment);

            topMargin += spacing;

            TextFragment inputTitleFragment = new TextFragment("\nAs per the User Input:\n")
            {
                Margin = new MarginInfo { Top = topMargin, Left = leftMargin, Right = rightMargin }
            };
            inputTitleFragment.TextState.FontSize = 14;
            inputTitleFragment.TextState.FontStyle = FontStyles.Bold;
            inputTitleFragment.TextState.ForegroundColor = Aspose.Pdf.Color.DarkKhaki;
            page.Paragraphs.Add(inputTitleFragment);

            topMargin += spacing;

            // Add user input text
            TextFragment inputFragment = new TextFragment(model.UserInput ?? "No input provided") // Null check
            {
                Margin = new MarginInfo { Top = 0, Left = leftMargin, Right = rightMargin }
            };
            inputFragment.TextState.FontSize = 12;
            inputFragment.TextState.ForegroundColor = Aspose.Pdf.Color.Black;
            page.Paragraphs.Add(inputFragment);

            if (!string.IsNullOrEmpty(model.ErrorMessage))
            {
                topMargin += spacing;
                TextFragment errorFragment = new TextFragment($"Error: {model.ErrorMessage}")
                {
                    Margin = new MarginInfo { Top = topMargin, Left = leftMargin, Right = rightMargin }
                };
                errorFragment.TextState.FontSize = 12;
                errorFragment.TextState.ForegroundColor = Aspose.Pdf.Color.Red;
                page.Paragraphs.Add(errorFragment);
            }
            else if (!string.IsNullOrEmpty(model.MLOutput))
            {
                topMargin += spacing;
                TextFragment outputTitleFragment = new TextFragment("This is the Cost Estimation by the System:\n")
                {
                    Margin = new MarginInfo { Top = topMargin, Left = leftMargin, Right = rightMargin }
                };
                outputTitleFragment.TextState.FontSize = 14;
                outputTitleFragment.TextState.FontStyle = FontStyles.Bold;
                outputTitleFragment.TextState.ForegroundColor = Aspose.Pdf.Color.DarkGreen;
                page.Paragraphs.Add(outputTitleFragment);

                topMargin += spacing;
                TextFragment outputFragment = new TextFragment(model.MLOutput ?? "No output generated") // Null check
                {
                    Margin = new MarginInfo { Top = 0, Left = leftMargin, Right = rightMargin }
                };
                outputFragment.TextState.FontSize = 12;
                outputFragment.TextState.ForegroundColor = Aspose.Pdf.Color.Black;
                page.Paragraphs.Add(outputFragment);
            }

            using (MemoryStream stream = new MemoryStream())
            {
                pdfDocument.Save(stream);
                return stream.ToArray();
            }
        }
    }
}
